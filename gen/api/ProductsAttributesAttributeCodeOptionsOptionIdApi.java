/*
 * Commerce Admin REST endpoints - All inclusive
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;


import org.openapitools.client.model.UNKNOWN_BASE_TYPE;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductsAttributesAttributeCodeOptionsOptionIdApi {
    private ApiClient localVarApiClient;

    public ProductsAttributesAttributeCodeOptionsOptionIdApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductsAttributesAttributeCodeOptionsOptionIdApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteV1ProductsAttributesAttributeCodeOptionsOptionId
     * @param attributeCode  (required)
     * @param optionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV1ProductsAttributesAttributeCodeOptionsOptionIdCall(String attributeCode, String optionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/V1/products/attributes/{attributeCode}/options/{optionId}"
            .replaceAll("\\{" + "attributeCode" + "\\}", localVarApiClient.escapeString(attributeCode.toString()))
            .replaceAll("\\{" + "optionId" + "\\}", localVarApiClient.escapeString(optionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV1ProductsAttributesAttributeCodeOptionsOptionIdValidateBeforeCall(String attributeCode, String optionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'attributeCode' is set
        if (attributeCode == null) {
            throw new ApiException("Missing the required parameter 'attributeCode' when calling deleteV1ProductsAttributesAttributeCodeOptionsOptionId(Async)");
        }
        
        // verify the required parameter 'optionId' is set
        if (optionId == null) {
            throw new ApiException("Missing the required parameter 'optionId' when calling deleteV1ProductsAttributesAttributeCodeOptionsOptionId(Async)");
        }
        

        okhttp3.Call localVarCall = deleteV1ProductsAttributesAttributeCodeOptionsOptionIdCall(attributeCode, optionId, _callback);
        return localVarCall;

    }

    /**
     * products/attributes/{attributeCode}/options/{optionId}
     * Delete option from attribute
     * @param attributeCode  (required)
     * @param optionId  (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Boolean deleteV1ProductsAttributesAttributeCodeOptionsOptionId(String attributeCode, String optionId) throws ApiException {
        ApiResponse<Boolean> localVarResp = deleteV1ProductsAttributesAttributeCodeOptionsOptionIdWithHttpInfo(attributeCode, optionId);
        return localVarResp.getData();
    }

    /**
     * products/attributes/{attributeCode}/options/{optionId}
     * Delete option from attribute
     * @param attributeCode  (required)
     * @param optionId  (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> deleteV1ProductsAttributesAttributeCodeOptionsOptionIdWithHttpInfo(String attributeCode, String optionId) throws ApiException {
        okhttp3.Call localVarCall = deleteV1ProductsAttributesAttributeCodeOptionsOptionIdValidateBeforeCall(attributeCode, optionId, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * products/attributes/{attributeCode}/options/{optionId} (asynchronously)
     * Delete option from attribute
     * @param attributeCode  (required)
     * @param optionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV1ProductsAttributesAttributeCodeOptionsOptionIdAsync(String attributeCode, String optionId, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV1ProductsAttributesAttributeCodeOptionsOptionIdValidateBeforeCall(attributeCode, optionId, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV1ProductsAttributesAttributeCodeOptionsOptionId
     * @param attributeCode  (required)
     * @param optionId  (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV1ProductsAttributesAttributeCodeOptionsOptionIdCall(String attributeCode, Integer optionId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/V1/products/attributes/{attributeCode}/options/{optionId}"
            .replaceAll("\\{" + "attributeCode" + "\\}", localVarApiClient.escapeString(attributeCode.toString()))
            .replaceAll("\\{" + "optionId" + "\\}", localVarApiClient.escapeString(optionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV1ProductsAttributesAttributeCodeOptionsOptionIdValidateBeforeCall(String attributeCode, Integer optionId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'attributeCode' is set
        if (attributeCode == null) {
            throw new ApiException("Missing the required parameter 'attributeCode' when calling putV1ProductsAttributesAttributeCodeOptionsOptionId(Async)");
        }
        
        // verify the required parameter 'optionId' is set
        if (optionId == null) {
            throw new ApiException("Missing the required parameter 'optionId' when calling putV1ProductsAttributesAttributeCodeOptionsOptionId(Async)");
        }
        

        okhttp3.Call localVarCall = putV1ProductsAttributesAttributeCodeOptionsOptionIdCall(attributeCode, optionId, UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * products/attributes/{attributeCode}/options/{optionId}
     * Update attribute option
     * @param attributeCode  (required)
     * @param optionId  (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public Boolean putV1ProductsAttributesAttributeCodeOptionsOptionId(String attributeCode, Integer optionId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        ApiResponse<Boolean> localVarResp = putV1ProductsAttributesAttributeCodeOptionsOptionIdWithHttpInfo(attributeCode, optionId, UNKNOWN_BASE_TYPE);
        return localVarResp.getData();
    }

    /**
     * products/attributes/{attributeCode}/options/{optionId}
     * Update attribute option
     * @param attributeCode  (required)
     * @param optionId  (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> putV1ProductsAttributesAttributeCodeOptionsOptionIdWithHttpInfo(String attributeCode, Integer optionId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = putV1ProductsAttributesAttributeCodeOptionsOptionIdValidateBeforeCall(attributeCode, optionId, UNKNOWN_BASE_TYPE, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * products/attributes/{attributeCode}/options/{optionId} (asynchronously)
     * Update attribute option
     * @param attributeCode  (required)
     * @param optionId  (required)
     * @param UNKNOWN_BASE_TYPE  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 Success. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV1ProductsAttributesAttributeCodeOptionsOptionIdAsync(String attributeCode, Integer optionId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV1ProductsAttributesAttributeCodeOptionsOptionIdValidateBeforeCall(attributeCode, optionId, UNKNOWN_BASE_TYPE, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
