/**
* Account API
* The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
*
* The version of the OpenAPI document: v1.9.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models

import org.openapitools.client.models.ErrorParameter

import com.squareup.moshi.Json

/**
 * A container that defines the elements of error and warning messages.
 * @param category The category type for this error or warning. It is a string that can have one of three values:<ul><li><code>Application</code>: Indicates an exception or error occurred in the application code or at runtime. Examples include catching an exception in a service's business logic, system failures, or request errors from a dependency.</li><li><code>Business</code>: Used when your service or a dependent service refused to continue processing on the resource because of a business rule violation such as \"Seller does not ship item to Antarctica\" or \"Buyer ineligible to purchase an alcoholic item\". Business errors are not syntactical input errors.</li><li><code>Request</code>: Used when there is anything wrong with the request, such as authentication, syntactical errors, rate limiting or missing headers, bad HTTP header values, and so on.</li></ul>
 * @param domain Name of the domain ,or primary system, of the service or application where the error occurred.
 * @param errorId A positive integer that uniquely identifies the specific error condition that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms.
 * @param inputRefIds Identifies specific request elements associated with the error, if any. inputRefId's response is format specific. For JSON, use <i>JSONPath</i> notation.
 * @param longMessage A more detailed explanation of the error than given in the <code>message</code> error field.
 * @param message Information on how to correct the problem, in the end user's terms and language where applicable. Its value is at most 50 characters long. If applicable, the value is localized in the end user's requested locale.
 * @param outputRefIds Identifies specific response elements associated with the error, if any. Path format is the same as <code>inputRefId</code>.
 * @param parameters This optional list of name/value pairs that contain context-specific <code>ErrorParameter</code> objects, with each item in the list being a parameter (or input field name) that caused an error condition. Each <code>ErrorParameter</code> object consists of two fields, a <code>name</code> and a <code>value</code>.
 * @param subdomain If present, indicates the subsystem in which the error occurred.
 */

data class Error (
    /* The category type for this error or warning. It is a string that can have one of three values:<ul><li><code>Application</code>: Indicates an exception or error occurred in the application code or at runtime. Examples include catching an exception in a service's business logic, system failures, or request errors from a dependency.</li><li><code>Business</code>: Used when your service or a dependent service refused to continue processing on the resource because of a business rule violation such as \"Seller does not ship item to Antarctica\" or \"Buyer ineligible to purchase an alcoholic item\". Business errors are not syntactical input errors.</li><li><code>Request</code>: Used when there is anything wrong with the request, such as authentication, syntactical errors, rate limiting or missing headers, bad HTTP header values, and so on.</li></ul> */
    @Json(name = "category")
    val category: kotlin.String? = null,
    /* Name of the domain ,or primary system, of the service or application where the error occurred. */
    @Json(name = "domain")
    val domain: kotlin.String? = null,
    /* A positive integer that uniquely identifies the specific error condition that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms. */
    @Json(name = "errorId")
    val errorId: kotlin.Int? = null,
    /* Identifies specific request elements associated with the error, if any. inputRefId's response is format specific. For JSON, use <i>JSONPath</i> notation. */
    @Json(name = "inputRefIds")
    val inputRefIds: kotlin.collections.List<kotlin.String>? = null,
    /* A more detailed explanation of the error than given in the <code>message</code> error field. */
    @Json(name = "longMessage")
    val longMessage: kotlin.String? = null,
    /* Information on how to correct the problem, in the end user's terms and language where applicable. Its value is at most 50 characters long. If applicable, the value is localized in the end user's requested locale. */
    @Json(name = "message")
    val message: kotlin.String? = null,
    /* Identifies specific response elements associated with the error, if any. Path format is the same as <code>inputRefId</code>. */
    @Json(name = "outputRefIds")
    val outputRefIds: kotlin.collections.List<kotlin.String>? = null,
    /* This optional list of name/value pairs that contain context-specific <code>ErrorParameter</code> objects, with each item in the list being a parameter (or input field name) that caused an error condition. Each <code>ErrorParameter</code> object consists of two fields, a <code>name</code> and a <code>value</code>. */
    @Json(name = "parameters")
    val parameters: kotlin.collections.List<ErrorParameter>? = null,
    /* If present, indicates the subsystem in which the error occurred. */
    @Json(name = "subdomain")
    val subdomain: kotlin.String? = null
)

