/*
 * Commerce Admin REST endpoints - All inclusive
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.daill.magento.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;


import java.math.BigDecimal;

/**
 * Extension attribute for quote item totals model.
 */

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-05T21:04:04.031930900+02:00[Europe/Berlin]")
public class NegotiableQuoteDataNegotiableQuoteItemTotalsInterface {
  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private BigDecimal cost;

  public static final String SERIALIZED_NAME_CATALOG_PRICE = "catalog_price";
  @SerializedName(SERIALIZED_NAME_CATALOG_PRICE)
  private BigDecimal catalogPrice;

  public static final String SERIALIZED_NAME_BASE_CATALOG_PRICE = "base_catalog_price";
  @SerializedName(SERIALIZED_NAME_BASE_CATALOG_PRICE)
  private BigDecimal baseCatalogPrice;

  public static final String SERIALIZED_NAME_CATALOG_PRICE_INCL_TAX = "catalog_price_incl_tax";
  @SerializedName(SERIALIZED_NAME_CATALOG_PRICE_INCL_TAX)
  private BigDecimal catalogPriceInclTax;

  public static final String SERIALIZED_NAME_BASE_CATALOG_PRICE_INCL_TAX = "base_catalog_price_incl_tax";
  @SerializedName(SERIALIZED_NAME_BASE_CATALOG_PRICE_INCL_TAX)
  private BigDecimal baseCatalogPriceInclTax;

  public static final String SERIALIZED_NAME_CART_PRICE = "cart_price";
  @SerializedName(SERIALIZED_NAME_CART_PRICE)
  private BigDecimal cartPrice;

  public static final String SERIALIZED_NAME_BASE_CART_PRICE = "base_cart_price";
  @SerializedName(SERIALIZED_NAME_BASE_CART_PRICE)
  private BigDecimal baseCartPrice;

  public static final String SERIALIZED_NAME_CART_TAX = "cart_tax";
  @SerializedName(SERIALIZED_NAME_CART_TAX)
  private BigDecimal cartTax;

  public static final String SERIALIZED_NAME_BASE_CART_TAX = "base_cart_tax";
  @SerializedName(SERIALIZED_NAME_BASE_CART_TAX)
  private BigDecimal baseCartTax;

  public static final String SERIALIZED_NAME_CART_PRICE_INCL_TAX = "cart_price_incl_tax";
  @SerializedName(SERIALIZED_NAME_CART_PRICE_INCL_TAX)
  private BigDecimal cartPriceInclTax;

  public static final String SERIALIZED_NAME_BASE_CART_PRICE_INCL_TAX = "base_cart_price_incl_tax";
  @SerializedName(SERIALIZED_NAME_BASE_CART_PRICE_INCL_TAX)
  private BigDecimal baseCartPriceInclTax;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;


  public NegotiableQuoteDataNegotiableQuoteItemTotalsInterface cost(BigDecimal cost) {
    
    this.cost = cost;
    return this;
  }

   /**
   * Cost for quote item.
   * @return cost
  **/
  

  public BigDecimal getCost() {
    return cost;
  }


  public void setCost(BigDecimal cost) {
    this.cost = cost;
  }


  public NegotiableQuoteDataNegotiableQuoteItemTotalsInterface catalogPrice(BigDecimal catalogPrice) {
    
    this.catalogPrice = catalogPrice;
    return this;
  }

   /**
   * Catalog price for quote item.
   * @return catalogPrice
  **/
  

  public BigDecimal getCatalogPrice() {
    return catalogPrice;
  }


  public void setCatalogPrice(BigDecimal catalogPrice) {
    this.catalogPrice = catalogPrice;
  }


  public NegotiableQuoteDataNegotiableQuoteItemTotalsInterface baseCatalogPrice(BigDecimal baseCatalogPrice) {
    
    this.baseCatalogPrice = baseCatalogPrice;
    return this;
  }

   /**
   * Catalog price for quote item in base currency.
   * @return baseCatalogPrice
  **/
  

  public BigDecimal getBaseCatalogPrice() {
    return baseCatalogPrice;
  }


  public void setBaseCatalogPrice(BigDecimal baseCatalogPrice) {
    this.baseCatalogPrice = baseCatalogPrice;
  }


  public NegotiableQuoteDataNegotiableQuoteItemTotalsInterface catalogPriceInclTax(BigDecimal catalogPriceInclTax) {
    
    this.catalogPriceInclTax = catalogPriceInclTax;
    return this;
  }

   /**
   * Catalog price with included tax for quote item.
   * @return catalogPriceInclTax
  **/
  

  public BigDecimal getCatalogPriceInclTax() {
    return catalogPriceInclTax;
  }


  public void setCatalogPriceInclTax(BigDecimal catalogPriceInclTax) {
    this.catalogPriceInclTax = catalogPriceInclTax;
  }


  public NegotiableQuoteDataNegotiableQuoteItemTotalsInterface baseCatalogPriceInclTax(BigDecimal baseCatalogPriceInclTax) {
    
    this.baseCatalogPriceInclTax = baseCatalogPriceInclTax;
    return this;
  }

   /**
   * Catalog price with included tax for quote item in base currency.
   * @return baseCatalogPriceInclTax
  **/
  

  public BigDecimal getBaseCatalogPriceInclTax() {
    return baseCatalogPriceInclTax;
  }


  public void setBaseCatalogPriceInclTax(BigDecimal baseCatalogPriceInclTax) {
    this.baseCatalogPriceInclTax = baseCatalogPriceInclTax;
  }


  public NegotiableQuoteDataNegotiableQuoteItemTotalsInterface cartPrice(BigDecimal cartPrice) {
    
    this.cartPrice = cartPrice;
    return this;
  }

   /**
   * Cart price for quote item.
   * @return cartPrice
  **/
  

  public BigDecimal getCartPrice() {
    return cartPrice;
  }


  public void setCartPrice(BigDecimal cartPrice) {
    this.cartPrice = cartPrice;
  }


  public NegotiableQuoteDataNegotiableQuoteItemTotalsInterface baseCartPrice(BigDecimal baseCartPrice) {
    
    this.baseCartPrice = baseCartPrice;
    return this;
  }

   /**
   * Cart price for quote item in base currency.
   * @return baseCartPrice
  **/
  

  public BigDecimal getBaseCartPrice() {
    return baseCartPrice;
  }


  public void setBaseCartPrice(BigDecimal baseCartPrice) {
    this.baseCartPrice = baseCartPrice;
  }


  public NegotiableQuoteDataNegotiableQuoteItemTotalsInterface cartTax(BigDecimal cartTax) {
    
    this.cartTax = cartTax;
    return this;
  }

   /**
   * Tax from catalog price for quote item.
   * @return cartTax
  **/
  

  public BigDecimal getCartTax() {
    return cartTax;
  }


  public void setCartTax(BigDecimal cartTax) {
    this.cartTax = cartTax;
  }


  public NegotiableQuoteDataNegotiableQuoteItemTotalsInterface baseCartTax(BigDecimal baseCartTax) {
    
    this.baseCartTax = baseCartTax;
    return this;
  }

   /**
   * Tax from catalog price for quote item in base currency.
   * @return baseCartTax
  **/
  

  public BigDecimal getBaseCartTax() {
    return baseCartTax;
  }


  public void setBaseCartTax(BigDecimal baseCartTax) {
    this.baseCartTax = baseCartTax;
  }


  public NegotiableQuoteDataNegotiableQuoteItemTotalsInterface cartPriceInclTax(BigDecimal cartPriceInclTax) {
    
    this.cartPriceInclTax = cartPriceInclTax;
    return this;
  }

   /**
   * Cart price with included tax for quote item.
   * @return cartPriceInclTax
  **/
  

  public BigDecimal getCartPriceInclTax() {
    return cartPriceInclTax;
  }


  public void setCartPriceInclTax(BigDecimal cartPriceInclTax) {
    this.cartPriceInclTax = cartPriceInclTax;
  }


  public NegotiableQuoteDataNegotiableQuoteItemTotalsInterface baseCartPriceInclTax(BigDecimal baseCartPriceInclTax) {
    
    this.baseCartPriceInclTax = baseCartPriceInclTax;
    return this;
  }

   /**
   * Cart price with included tax for quote item in base currency.
   * @return baseCartPriceInclTax
  **/
  

  public BigDecimal getBaseCartPriceInclTax() {
    return baseCartPriceInclTax;
  }


  public void setBaseCartPriceInclTax(BigDecimal baseCartPriceInclTax) {
    this.baseCartPriceInclTax = baseCartPriceInclTax;
  }


  public NegotiableQuoteDataNegotiableQuoteItemTotalsInterface extensionAttributes(Object extensionAttributes) {
    
    this.extensionAttributes = extensionAttributes;
    return this;
  }

   /**
   * ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\NegotiableQuoteItemTotalsInterface
   * @return extensionAttributes
  **/
  


  public Object getExtensionAttributes() {
    return extensionAttributes;
  }


  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NegotiableQuoteDataNegotiableQuoteItemTotalsInterface negotiableQuoteDataNegotiableQuoteItemTotalsInterface = (NegotiableQuoteDataNegotiableQuoteItemTotalsInterface) o;
    return Objects.equals(this.cost, negotiableQuoteDataNegotiableQuoteItemTotalsInterface.cost) &&
        Objects.equals(this.catalogPrice, negotiableQuoteDataNegotiableQuoteItemTotalsInterface.catalogPrice) &&
        Objects.equals(this.baseCatalogPrice, negotiableQuoteDataNegotiableQuoteItemTotalsInterface.baseCatalogPrice) &&
        Objects.equals(this.catalogPriceInclTax, negotiableQuoteDataNegotiableQuoteItemTotalsInterface.catalogPriceInclTax) &&
        Objects.equals(this.baseCatalogPriceInclTax, negotiableQuoteDataNegotiableQuoteItemTotalsInterface.baseCatalogPriceInclTax) &&
        Objects.equals(this.cartPrice, negotiableQuoteDataNegotiableQuoteItemTotalsInterface.cartPrice) &&
        Objects.equals(this.baseCartPrice, negotiableQuoteDataNegotiableQuoteItemTotalsInterface.baseCartPrice) &&
        Objects.equals(this.cartTax, negotiableQuoteDataNegotiableQuoteItemTotalsInterface.cartTax) &&
        Objects.equals(this.baseCartTax, negotiableQuoteDataNegotiableQuoteItemTotalsInterface.baseCartTax) &&
        Objects.equals(this.cartPriceInclTax, negotiableQuoteDataNegotiableQuoteItemTotalsInterface.cartPriceInclTax) &&
        Objects.equals(this.baseCartPriceInclTax, negotiableQuoteDataNegotiableQuoteItemTotalsInterface.baseCartPriceInclTax) &&
        Objects.equals(this.extensionAttributes, negotiableQuoteDataNegotiableQuoteItemTotalsInterface.extensionAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cost, catalogPrice, baseCatalogPrice, catalogPriceInclTax, baseCatalogPriceInclTax, cartPrice, baseCartPrice, cartTax, baseCartTax, cartPriceInclTax, baseCartPriceInclTax, extensionAttributes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NegotiableQuoteDataNegotiableQuoteItemTotalsInterface {\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    catalogPrice: ").append(toIndentedString(catalogPrice)).append("\n");
    sb.append("    baseCatalogPrice: ").append(toIndentedString(baseCatalogPrice)).append("\n");
    sb.append("    catalogPriceInclTax: ").append(toIndentedString(catalogPriceInclTax)).append("\n");
    sb.append("    baseCatalogPriceInclTax: ").append(toIndentedString(baseCatalogPriceInclTax)).append("\n");
    sb.append("    cartPrice: ").append(toIndentedString(cartPrice)).append("\n");
    sb.append("    baseCartPrice: ").append(toIndentedString(baseCartPrice)).append("\n");
    sb.append("    cartTax: ").append(toIndentedString(cartTax)).append("\n");
    sb.append("    baseCartTax: ").append(toIndentedString(baseCartTax)).append("\n");
    sb.append("    cartPriceInclTax: ").append(toIndentedString(cartPriceInclTax)).append("\n");
    sb.append("    baseCartPriceInclTax: ").append(toIndentedString(baseCartPriceInclTax)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

