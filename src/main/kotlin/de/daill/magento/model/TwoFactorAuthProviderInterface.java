/*
 * Commerce Admin REST endpoints - All inclusive
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.daill.magento.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;


import java.util.ArrayList;
import java.util.List;

/**
 * 2FA provider interface
 */

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-05T21:04:04.031930900+02:00[Europe/Berlin]")
public class TwoFactorAuthProviderInterface {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ENGINE = "engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private TwoFactorAuthEngineInterface engine;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_RESET_ALLOWED = "reset_allowed";
  @SerializedName(SERIALIZED_NAME_RESET_ALLOWED)
  private Boolean resetAllowed;

  public static final String SERIALIZED_NAME_CONFIGURE_ACTION = "configure_action";
  @SerializedName(SERIALIZED_NAME_CONFIGURE_ACTION)
  private String configureAction;

  public static final String SERIALIZED_NAME_AUTH_ACTION = "auth_action";
  @SerializedName(SERIALIZED_NAME_AUTH_ACTION)
  private String authAction;

  public static final String SERIALIZED_NAME_EXTRA_ACTIONS = "extra_actions";
  @SerializedName(SERIALIZED_NAME_EXTRA_ACTIONS)
  private List<String> extraActions = new ArrayList<String>();


  public TwoFactorAuthProviderInterface enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * True if this provider has been enabled by admin
   * @return enabled
  **/


  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public TwoFactorAuthProviderInterface engine(TwoFactorAuthEngineInterface engine) {
    
    this.engine = engine;
    return this;
  }

   /**
   * Get engine
   * @return engine
  **/


  public TwoFactorAuthEngineInterface getEngine() {
    return engine;
  }


  public void setEngine(TwoFactorAuthEngineInterface engine) {
    this.engine = engine;
  }


  public TwoFactorAuthProviderInterface code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * Provider code
   * @return code
  **/


  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public TwoFactorAuthProviderInterface name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Provider name
   * @return name
  **/


  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public TwoFactorAuthProviderInterface icon(String icon) {
    
    this.icon = icon;
    return this;
  }

   /**
   * Icon
   * @return icon
  **/


  public String getIcon() {
    return icon;
  }


  public void setIcon(String icon) {
    this.icon = icon;
  }


  public TwoFactorAuthProviderInterface resetAllowed(Boolean resetAllowed) {
    
    this.resetAllowed = resetAllowed;
    return this;
  }

   /**
   * True if this provider configuration can be reset
   * @return resetAllowed
  **/


  public Boolean getResetAllowed() {
    return resetAllowed;
  }


  public void setResetAllowed(Boolean resetAllowed) {
    this.resetAllowed = resetAllowed;
  }


  public TwoFactorAuthProviderInterface configureAction(String configureAction) {
    
    this.configureAction = configureAction;
    return this;
  }

   /**
   * Configure action
   * @return configureAction
  **/


  public String getConfigureAction() {
    return configureAction;
  }


  public void setConfigureAction(String configureAction) {
    this.configureAction = configureAction;
  }


  public TwoFactorAuthProviderInterface authAction(String authAction) {
    
    this.authAction = authAction;
    return this;
  }

   /**
   * Auth action
   * @return authAction
  **/


  public String getAuthAction() {
    return authAction;
  }


  public void setAuthAction(String authAction) {
    this.authAction = authAction;
  }


  public TwoFactorAuthProviderInterface extraActions(List<String> extraActions) {
    
    this.extraActions = extraActions;
    return this;
  }

  public TwoFactorAuthProviderInterface addExtraActionsItem(String extraActionsItem) {
    this.extraActions.add(extraActionsItem);
    return this;
  }

   /**
   * Allowed extra actions
   * @return extraActions
  **/


  public List<String> getExtraActions() {
    return extraActions;
  }


  public void setExtraActions(List<String> extraActions) {
    this.extraActions = extraActions;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TwoFactorAuthProviderInterface twoFactorAuthProviderInterface = (TwoFactorAuthProviderInterface) o;
    return Objects.equals(this.enabled, twoFactorAuthProviderInterface.enabled) &&
        Objects.equals(this.engine, twoFactorAuthProviderInterface.engine) &&
        Objects.equals(this.code, twoFactorAuthProviderInterface.code) &&
        Objects.equals(this.name, twoFactorAuthProviderInterface.name) &&
        Objects.equals(this.icon, twoFactorAuthProviderInterface.icon) &&
        Objects.equals(this.resetAllowed, twoFactorAuthProviderInterface.resetAllowed) &&
        Objects.equals(this.configureAction, twoFactorAuthProviderInterface.configureAction) &&
        Objects.equals(this.authAction, twoFactorAuthProviderInterface.authAction) &&
        Objects.equals(this.extraActions, twoFactorAuthProviderInterface.extraActions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, engine, code, name, icon, resetAllowed, configureAction, authAction, extraActions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TwoFactorAuthProviderInterface {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    resetAllowed: ").append(toIndentedString(resetAllowed)).append("\n");
    sb.append("    configureAction: ").append(toIndentedString(configureAction)).append("\n");
    sb.append("    authAction: ").append(toIndentedString(authAction)).append("\n");
    sb.append("    extraActions: ").append(toIndentedString(extraActions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

