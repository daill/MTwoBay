/*
 * Commerce Admin REST endpoints - All inclusive
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.daill.magento.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;


/**
 * Filter to filter by Fields. Each field may be filtered with different condition type. Supported condition types restricted by @see \\Magento\\Framework\\Api\\SearchCriteriaInterface
 */

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-05T21:04:04.031930900+02:00[Europe/Berlin]")
public class InventoryInStorePickupApiDataSearchRequestFiltersInterface {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private InventoryInStorePickupApiDataSearchRequestFilterInterface country;

  public static final String SERIALIZED_NAME_POSTCODE = "postcode";
  @SerializedName(SERIALIZED_NAME_POSTCODE)
  private InventoryInStorePickupApiDataSearchRequestFilterInterface postcode;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private InventoryInStorePickupApiDataSearchRequestFilterInterface region;

  public static final String SERIALIZED_NAME_REGION_ID = "region_id";
  @SerializedName(SERIALIZED_NAME_REGION_ID)
  private InventoryInStorePickupApiDataSearchRequestFilterInterface regionId;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private InventoryInStorePickupApiDataSearchRequestFilterInterface city;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private InventoryInStorePickupApiDataSearchRequestFilterInterface street;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private InventoryInStorePickupApiDataSearchRequestFilterInterface name;

  public static final String SERIALIZED_NAME_PICKUP_LOCATION_CODE = "pickup_location_code";
  @SerializedName(SERIALIZED_NAME_PICKUP_LOCATION_CODE)
  private InventoryInStorePickupApiDataSearchRequestFilterInterface pickupLocationCode;


  public InventoryInStorePickupApiDataSearchRequestFiltersInterface country(InventoryInStorePickupApiDataSearchRequestFilterInterface country) {
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/



  public InventoryInStorePickupApiDataSearchRequestFilterInterface getCountry() {
    return country;
  }


  public void setCountry(InventoryInStorePickupApiDataSearchRequestFilterInterface country) {
    this.country = country;
  }


  public InventoryInStorePickupApiDataSearchRequestFiltersInterface postcode(InventoryInStorePickupApiDataSearchRequestFilterInterface postcode) {
    
    this.postcode = postcode;
    return this;
  }

   /**
   * Get postcode
   * @return postcode
  **/



  public InventoryInStorePickupApiDataSearchRequestFilterInterface getPostcode() {
    return postcode;
  }


  public void setPostcode(InventoryInStorePickupApiDataSearchRequestFilterInterface postcode) {
    this.postcode = postcode;
  }


  public InventoryInStorePickupApiDataSearchRequestFiltersInterface region(InventoryInStorePickupApiDataSearchRequestFilterInterface region) {
    
    this.region = region;
    return this;
  }

   /**
   * Get region
   * @return region
  **/



  public InventoryInStorePickupApiDataSearchRequestFilterInterface getRegion() {
    return region;
  }


  public void setRegion(InventoryInStorePickupApiDataSearchRequestFilterInterface region) {
    this.region = region;
  }


  public InventoryInStorePickupApiDataSearchRequestFiltersInterface regionId(InventoryInStorePickupApiDataSearchRequestFilterInterface regionId) {
    
    this.regionId = regionId;
    return this;
  }

   /**
   * Get regionId
   * @return regionId
  **/



  public InventoryInStorePickupApiDataSearchRequestFilterInterface getRegionId() {
    return regionId;
  }


  public void setRegionId(InventoryInStorePickupApiDataSearchRequestFilterInterface regionId) {
    this.regionId = regionId;
  }


  public InventoryInStorePickupApiDataSearchRequestFiltersInterface city(InventoryInStorePickupApiDataSearchRequestFilterInterface city) {
    
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/



  public InventoryInStorePickupApiDataSearchRequestFilterInterface getCity() {
    return city;
  }


  public void setCity(InventoryInStorePickupApiDataSearchRequestFilterInterface city) {
    this.city = city;
  }


  public InventoryInStorePickupApiDataSearchRequestFiltersInterface street(InventoryInStorePickupApiDataSearchRequestFilterInterface street) {
    
    this.street = street;
    return this;
  }

   /**
   * Get street
   * @return street
  **/



  public InventoryInStorePickupApiDataSearchRequestFilterInterface getStreet() {
    return street;
  }


  public void setStreet(InventoryInStorePickupApiDataSearchRequestFilterInterface street) {
    this.street = street;
  }


  public InventoryInStorePickupApiDataSearchRequestFiltersInterface name(InventoryInStorePickupApiDataSearchRequestFilterInterface name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/



  public InventoryInStorePickupApiDataSearchRequestFilterInterface getName() {
    return name;
  }


  public void setName(InventoryInStorePickupApiDataSearchRequestFilterInterface name) {
    this.name = name;
  }


  public InventoryInStorePickupApiDataSearchRequestFiltersInterface pickupLocationCode(InventoryInStorePickupApiDataSearchRequestFilterInterface pickupLocationCode) {
    
    this.pickupLocationCode = pickupLocationCode;
    return this;
  }

   /**
   * Get pickupLocationCode
   * @return pickupLocationCode
  **/



  public InventoryInStorePickupApiDataSearchRequestFilterInterface getPickupLocationCode() {
    return pickupLocationCode;
  }


  public void setPickupLocationCode(InventoryInStorePickupApiDataSearchRequestFilterInterface pickupLocationCode) {
    this.pickupLocationCode = pickupLocationCode;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InventoryInStorePickupApiDataSearchRequestFiltersInterface inventoryInStorePickupApiDataSearchRequestFiltersInterface = (InventoryInStorePickupApiDataSearchRequestFiltersInterface) o;
    return Objects.equals(this.country, inventoryInStorePickupApiDataSearchRequestFiltersInterface.country) &&
        Objects.equals(this.postcode, inventoryInStorePickupApiDataSearchRequestFiltersInterface.postcode) &&
        Objects.equals(this.region, inventoryInStorePickupApiDataSearchRequestFiltersInterface.region) &&
        Objects.equals(this.regionId, inventoryInStorePickupApiDataSearchRequestFiltersInterface.regionId) &&
        Objects.equals(this.city, inventoryInStorePickupApiDataSearchRequestFiltersInterface.city) &&
        Objects.equals(this.street, inventoryInStorePickupApiDataSearchRequestFiltersInterface.street) &&
        Objects.equals(this.name, inventoryInStorePickupApiDataSearchRequestFiltersInterface.name) &&
        Objects.equals(this.pickupLocationCode, inventoryInStorePickupApiDataSearchRequestFiltersInterface.pickupLocationCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, postcode, region, regionId, city, street, name, pickupLocationCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InventoryInStorePickupApiDataSearchRequestFiltersInterface {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    postcode: ").append(toIndentedString(postcode)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    regionId: ").append(toIndentedString(regionId)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pickupLocationCode: ").append(toIndentedString(pickupLocationCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

