/*
 * Commerce Admin REST endpoints - All inclusive
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.daill.model.magento;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Transaction interface. A transaction is an interaction between a merchant and a customer such as a purchase, a credit, a refund, and so on.
 */

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-05T21:04:04.031930900+02:00[Europe/Berlin]")
public class SalesDataTransactionInterface {
  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transaction_id";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private Integer transactionId;

  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private Integer parentId;

  public static final String SERIALIZED_NAME_ORDER_ID = "order_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private Integer orderId;

  public static final String SERIALIZED_NAME_PAYMENT_ID = "payment_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ID)
  private Integer paymentId;

  public static final String SERIALIZED_NAME_TXN_ID = "txn_id";
  @SerializedName(SERIALIZED_NAME_TXN_ID)
  private String txnId;

  public static final String SERIALIZED_NAME_PARENT_TXN_ID = "parent_txn_id";
  @SerializedName(SERIALIZED_NAME_PARENT_TXN_ID)
  private String parentTxnId;

  public static final String SERIALIZED_NAME_TXN_TYPE = "txn_type";
  @SerializedName(SERIALIZED_NAME_TXN_TYPE)
  private String txnType;

  public static final String SERIALIZED_NAME_IS_CLOSED = "is_closed";
  @SerializedName(SERIALIZED_NAME_IS_CLOSED)
  private Integer isClosed;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFORMATION = "additional_information";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFORMATION)
  private List<String> additionalInformation = null;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CHILD_TRANSACTIONS = "child_transactions";
  @SerializedName(SERIALIZED_NAME_CHILD_TRANSACTIONS)
  private List<SalesDataTransactionInterface> childTransactions = new ArrayList<SalesDataTransactionInterface>();

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;


  public SalesDataTransactionInterface transactionId(Integer transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Transaction ID.
   * @return transactionId
  **/


  public Integer getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(Integer transactionId) {
    this.transactionId = transactionId;
  }


  public SalesDataTransactionInterface parentId(Integer parentId) {
    
    this.parentId = parentId;
    return this;
  }

   /**
   * The parent ID for the transaction. Otherwise, null.
   * @return parentId
  **/



  public Integer getParentId() {
    return parentId;
  }


  public void setParentId(Integer parentId) {
    this.parentId = parentId;
  }


  public SalesDataTransactionInterface orderId(Integer orderId) {
    
    this.orderId = orderId;
    return this;
  }

   /**
   * Order ID.
   * @return orderId
  **/


  public Integer getOrderId() {
    return orderId;
  }


  public void setOrderId(Integer orderId) {
    this.orderId = orderId;
  }


  public SalesDataTransactionInterface paymentId(Integer paymentId) {
    
    this.paymentId = paymentId;
    return this;
  }

   /**
   * Payment ID.
   * @return paymentId
  **/


  public Integer getPaymentId() {
    return paymentId;
  }


  public void setPaymentId(Integer paymentId) {
    this.paymentId = paymentId;
  }


  public SalesDataTransactionInterface txnId(String txnId) {
    
    this.txnId = txnId;
    return this;
  }

   /**
   * Transaction business ID.
   * @return txnId
  **/


  public String getTxnId() {
    return txnId;
  }


  public void setTxnId(String txnId) {
    this.txnId = txnId;
  }


  public SalesDataTransactionInterface parentTxnId(String parentTxnId) {
    
    this.parentTxnId = parentTxnId;
    return this;
  }

   /**
   * Parent transaction business ID.
   * @return parentTxnId
  **/


  public String getParentTxnId() {
    return parentTxnId;
  }


  public void setParentTxnId(String parentTxnId) {
    this.parentTxnId = parentTxnId;
  }


  public SalesDataTransactionInterface txnType(String txnType) {
    
    this.txnType = txnType;
    return this;
  }

   /**
   * Transaction type.
   * @return txnType
  **/


  public String getTxnType() {
    return txnType;
  }


  public void setTxnType(String txnType) {
    this.txnType = txnType;
  }


  public SalesDataTransactionInterface isClosed(Integer isClosed) {
    
    this.isClosed = isClosed;
    return this;
  }

   /**
   * Is-closed flag value.
   * @return isClosed
  **/


  public Integer getIsClosed() {
    return isClosed;
  }


  public void setIsClosed(Integer isClosed) {
    this.isClosed = isClosed;
  }


  public SalesDataTransactionInterface additionalInformation(List<String> additionalInformation) {
    
    this.additionalInformation = additionalInformation;
    return this;
  }

  public SalesDataTransactionInterface addAdditionalInformationItem(String additionalInformationItem) {
    if (this.additionalInformation == null) {
      this.additionalInformation = new ArrayList<String>();
    }
    this.additionalInformation.add(additionalInformationItem);
    return this;
  }

   /**
   * Array of additional information. Otherwise, null.
   * @return additionalInformation
  **/



  public List<String> getAdditionalInformation() {
    return additionalInformation;
  }


  public void setAdditionalInformation(List<String> additionalInformation) {
    this.additionalInformation = additionalInformation;
  }


  public SalesDataTransactionInterface createdAt(String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Created-at timestamp.
   * @return createdAt
  **/


  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public SalesDataTransactionInterface childTransactions(List<SalesDataTransactionInterface> childTransactions) {
    
    this.childTransactions = childTransactions;
    return this;
  }

  public SalesDataTransactionInterface addChildTransactionsItem(SalesDataTransactionInterface childTransactionsItem) {
    this.childTransactions.add(childTransactionsItem);
    return this;
  }

   /**
   * Array of child transactions.
   * @return childTransactions
  **/


  public List<SalesDataTransactionInterface> getChildTransactions() {
    return childTransactions;
  }


  public void setChildTransactions(List<SalesDataTransactionInterface> childTransactions) {
    this.childTransactions = childTransactions;
  }


  public SalesDataTransactionInterface extensionAttributes(Object extensionAttributes) {
    
    this.extensionAttributes = extensionAttributes;
    return this;
  }

   /**
   * ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\TransactionInterface
   * @return extensionAttributes
  **/



  public Object getExtensionAttributes() {
    return extensionAttributes;
  }


  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesDataTransactionInterface salesDataTransactionInterface = (SalesDataTransactionInterface) o;
    return Objects.equals(this.transactionId, salesDataTransactionInterface.transactionId) &&
        Objects.equals(this.parentId, salesDataTransactionInterface.parentId) &&
        Objects.equals(this.orderId, salesDataTransactionInterface.orderId) &&
        Objects.equals(this.paymentId, salesDataTransactionInterface.paymentId) &&
        Objects.equals(this.txnId, salesDataTransactionInterface.txnId) &&
        Objects.equals(this.parentTxnId, salesDataTransactionInterface.parentTxnId) &&
        Objects.equals(this.txnType, salesDataTransactionInterface.txnType) &&
        Objects.equals(this.isClosed, salesDataTransactionInterface.isClosed) &&
        Objects.equals(this.additionalInformation, salesDataTransactionInterface.additionalInformation) &&
        Objects.equals(this.createdAt, salesDataTransactionInterface.createdAt) &&
        Objects.equals(this.childTransactions, salesDataTransactionInterface.childTransactions) &&
        Objects.equals(this.extensionAttributes, salesDataTransactionInterface.extensionAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionId, parentId, orderId, paymentId, txnId, parentTxnId, txnType, isClosed, additionalInformation, createdAt, childTransactions, extensionAttributes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesDataTransactionInterface {\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    txnId: ").append(toIndentedString(txnId)).append("\n");
    sb.append("    parentTxnId: ").append(toIndentedString(parentTxnId)).append("\n");
    sb.append("    txnType: ").append(toIndentedString(txnType)).append("\n");
    sb.append("    isClosed: ").append(toIndentedString(isClosed)).append("\n");
    sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    childTransactions: ").append(toIndentedString(childTransactions)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

