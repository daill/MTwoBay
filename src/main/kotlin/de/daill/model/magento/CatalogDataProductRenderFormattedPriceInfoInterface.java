/*
 * Commerce Admin REST endpoints - All inclusive
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.daill.model.magento;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;


/**
 * Formatted Price interface. Aggregate formatted html with price representations. E.g.: &lt;span class&#x3D;\&quot;price\&quot;&gt;$9.00&lt;/span&gt; Consider currency, rounding and html
 */

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-05T21:04:04.031930900+02:00[Europe/Berlin]")
public class CatalogDataProductRenderFormattedPriceInfoInterface {
  public static final String SERIALIZED_NAME_FINAL_PRICE = "final_price";
  @SerializedName(SERIALIZED_NAME_FINAL_PRICE)
  private String finalPrice;

  public static final String SERIALIZED_NAME_MAX_PRICE = "max_price";
  @SerializedName(SERIALIZED_NAME_MAX_PRICE)
  private String maxPrice;

  public static final String SERIALIZED_NAME_MINIMAL_PRICE = "minimal_price";
  @SerializedName(SERIALIZED_NAME_MINIMAL_PRICE)
  private String minimalPrice;

  public static final String SERIALIZED_NAME_MAX_REGULAR_PRICE = "max_regular_price";
  @SerializedName(SERIALIZED_NAME_MAX_REGULAR_PRICE)
  private String maxRegularPrice;

  public static final String SERIALIZED_NAME_MINIMAL_REGULAR_PRICE = "minimal_regular_price";
  @SerializedName(SERIALIZED_NAME_MINIMAL_REGULAR_PRICE)
  private String minimalRegularPrice;

  public static final String SERIALIZED_NAME_SPECIAL_PRICE = "special_price";
  @SerializedName(SERIALIZED_NAME_SPECIAL_PRICE)
  private String specialPrice;

  public static final String SERIALIZED_NAME_REGULAR_PRICE = "regular_price";
  @SerializedName(SERIALIZED_NAME_REGULAR_PRICE)
  private String regularPrice;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;


  public CatalogDataProductRenderFormattedPriceInfoInterface finalPrice(String finalPrice) {
    
    this.finalPrice = finalPrice;
    return this;
  }

   /**
   * Html with final price
   * @return finalPrice
  **/
  

  public String getFinalPrice() {
    return finalPrice;
  }


  public void setFinalPrice(String finalPrice) {
    this.finalPrice = finalPrice;
  }


  public CatalogDataProductRenderFormattedPriceInfoInterface maxPrice(String maxPrice) {
    
    this.maxPrice = maxPrice;
    return this;
  }

   /**
   * Max price of a product
   * @return maxPrice
  **/
  

  public String getMaxPrice() {
    return maxPrice;
  }


  public void setMaxPrice(String maxPrice) {
    this.maxPrice = maxPrice;
  }


  public CatalogDataProductRenderFormattedPriceInfoInterface minimalPrice(String minimalPrice) {
    
    this.minimalPrice = minimalPrice;
    return this;
  }

   /**
   * The minimal price of the product or variation
   * @return minimalPrice
  **/
  

  public String getMinimalPrice() {
    return minimalPrice;
  }


  public void setMinimalPrice(String minimalPrice) {
    this.minimalPrice = minimalPrice;
  }


  public CatalogDataProductRenderFormattedPriceInfoInterface maxRegularPrice(String maxRegularPrice) {
    
    this.maxRegularPrice = maxRegularPrice;
    return this;
  }

   /**
   * Max regular price
   * @return maxRegularPrice
  **/
  

  public String getMaxRegularPrice() {
    return maxRegularPrice;
  }


  public void setMaxRegularPrice(String maxRegularPrice) {
    this.maxRegularPrice = maxRegularPrice;
  }


  public CatalogDataProductRenderFormattedPriceInfoInterface minimalRegularPrice(String minimalRegularPrice) {
    
    this.minimalRegularPrice = minimalRegularPrice;
    return this;
  }

   /**
   * Minimal regular price
   * @return minimalRegularPrice
  **/
  

  public String getMinimalRegularPrice() {
    return minimalRegularPrice;
  }


  public void setMinimalRegularPrice(String minimalRegularPrice) {
    this.minimalRegularPrice = minimalRegularPrice;
  }


  public CatalogDataProductRenderFormattedPriceInfoInterface specialPrice(String specialPrice) {
    
    this.specialPrice = specialPrice;
    return this;
  }

   /**
   * Special price
   * @return specialPrice
  **/
  

  public String getSpecialPrice() {
    return specialPrice;
  }


  public void setSpecialPrice(String specialPrice) {
    this.specialPrice = specialPrice;
  }


  public CatalogDataProductRenderFormattedPriceInfoInterface regularPrice(String regularPrice) {
    
    this.regularPrice = regularPrice;
    return this;
  }

   /**
   * Price - is price of product without discounts and special price with taxes and fixed product tax
   * @return regularPrice
  **/
  

  public String getRegularPrice() {
    return regularPrice;
  }


  public void setRegularPrice(String regularPrice) {
    this.regularPrice = regularPrice;
  }


  public CatalogDataProductRenderFormattedPriceInfoInterface extensionAttributes(Object extensionAttributes) {
    
    this.extensionAttributes = extensionAttributes;
    return this;
  }

   /**
   * ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRender\\FormattedPriceInfoInterface
   * @return extensionAttributes
  **/
  
  

  public Object getExtensionAttributes() {
    return extensionAttributes;
  }


  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogDataProductRenderFormattedPriceInfoInterface catalogDataProductRenderFormattedPriceInfoInterface = (CatalogDataProductRenderFormattedPriceInfoInterface) o;
    return Objects.equals(this.finalPrice, catalogDataProductRenderFormattedPriceInfoInterface.finalPrice) &&
        Objects.equals(this.maxPrice, catalogDataProductRenderFormattedPriceInfoInterface.maxPrice) &&
        Objects.equals(this.minimalPrice, catalogDataProductRenderFormattedPriceInfoInterface.minimalPrice) &&
        Objects.equals(this.maxRegularPrice, catalogDataProductRenderFormattedPriceInfoInterface.maxRegularPrice) &&
        Objects.equals(this.minimalRegularPrice, catalogDataProductRenderFormattedPriceInfoInterface.minimalRegularPrice) &&
        Objects.equals(this.specialPrice, catalogDataProductRenderFormattedPriceInfoInterface.specialPrice) &&
        Objects.equals(this.regularPrice, catalogDataProductRenderFormattedPriceInfoInterface.regularPrice) &&
        Objects.equals(this.extensionAttributes, catalogDataProductRenderFormattedPriceInfoInterface.extensionAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(finalPrice, maxPrice, minimalPrice, maxRegularPrice, minimalRegularPrice, specialPrice, regularPrice, extensionAttributes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogDataProductRenderFormattedPriceInfoInterface {\n");
    sb.append("    finalPrice: ").append(toIndentedString(finalPrice)).append("\n");
    sb.append("    maxPrice: ").append(toIndentedString(maxPrice)).append("\n");
    sb.append("    minimalPrice: ").append(toIndentedString(minimalPrice)).append("\n");
    sb.append("    maxRegularPrice: ").append(toIndentedString(maxRegularPrice)).append("\n");
    sb.append("    minimalRegularPrice: ").append(toIndentedString(minimalRegularPrice)).append("\n");
    sb.append("    specialPrice: ").append(toIndentedString(specialPrice)).append("\n");
    sb.append("    regularPrice: ").append(toIndentedString(regularPrice)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

