/*
 * Commerce Admin REST endpoints - All inclusive
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.daill.model.magento;

import com.squareup.moshi.Json;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * CatalogDataCategoryTreeInterface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-05T21:04:04.031930900+02:00[Europe/Berlin]")
public class CatalogDataCategoryTreeInterface {
  public static final String SERIALIZED_NAME_ID = "id";
  @Json(name = SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @Json(name = SERIALIZED_NAME_PARENT_ID)
  private Integer parentId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @Json(name = SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @Json(name = SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @Json(name = SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @Json(name = SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_PRODUCT_COUNT = "product_count";
  @Json(name = SERIALIZED_NAME_PRODUCT_COUNT)
  private Integer productCount;

  public static final String SERIALIZED_NAME_CHILDREN_DATA = "children_data";
  @Json(name = SERIALIZED_NAME_CHILDREN_DATA)
  private List<CatalogDataCategoryTreeInterface> childrenData = new ArrayList<CatalogDataCategoryTreeInterface>();


  public CatalogDataCategoryTreeInterface id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/



  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public CatalogDataCategoryTreeInterface parentId(Integer parentId) {
    
    this.parentId = parentId;
    return this;
  }

   /**
   * Parent category ID
   * @return parentId
  **/


  public Integer getParentId() {
    return parentId;
  }


  public void setParentId(Integer parentId) {
    this.parentId = parentId;
  }


  public CatalogDataCategoryTreeInterface name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Category name
   * @return name
  **/


  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CatalogDataCategoryTreeInterface isActive(Boolean isActive) {
    
    this.isActive = isActive;
    return this;
  }

   /**
   * Whether category is active
   * @return isActive
  **/


  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public CatalogDataCategoryTreeInterface position(Integer position) {
    
    this.position = position;
    return this;
  }

   /**
   * Category position
   * @return position
  **/


  public Integer getPosition() {
    return position;
  }


  public void setPosition(Integer position) {
    this.position = position;
  }


  public CatalogDataCategoryTreeInterface level(Integer level) {
    
    this.level = level;
    return this;
  }

   /**
   * Category level
   * @return level
  **/


  public Integer getLevel() {
    return level;
  }


  public void setLevel(Integer level) {
    this.level = level;
  }


  public CatalogDataCategoryTreeInterface productCount(Integer productCount) {
    
    this.productCount = productCount;
    return this;
  }

   /**
   * Product count
   * @return productCount
  **/


  public Integer getProductCount() {
    return productCount;
  }


  public void setProductCount(Integer productCount) {
    this.productCount = productCount;
  }


  public CatalogDataCategoryTreeInterface childrenData(List<CatalogDataCategoryTreeInterface> childrenData) {
    
    this.childrenData = childrenData;
    return this;
  }

  public CatalogDataCategoryTreeInterface addChildrenDataItem(CatalogDataCategoryTreeInterface childrenDataItem) {
    this.childrenData.add(childrenDataItem);
    return this;
  }

   /**
   * Get childrenData
   * @return childrenData
  **/


  public List<CatalogDataCategoryTreeInterface> getChildrenData() {
    return childrenData;
  }


  public void setChildrenData(List<CatalogDataCategoryTreeInterface> childrenData) {
    this.childrenData = childrenData;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogDataCategoryTreeInterface catalogDataCategoryTreeInterface = (CatalogDataCategoryTreeInterface) o;
    return Objects.equals(this.id, catalogDataCategoryTreeInterface.id) &&
        Objects.equals(this.parentId, catalogDataCategoryTreeInterface.parentId) &&
        Objects.equals(this.name, catalogDataCategoryTreeInterface.name) &&
        Objects.equals(this.isActive, catalogDataCategoryTreeInterface.isActive) &&
        Objects.equals(this.position, catalogDataCategoryTreeInterface.position) &&
        Objects.equals(this.level, catalogDataCategoryTreeInterface.level) &&
        Objects.equals(this.productCount, catalogDataCategoryTreeInterface.productCount) &&
        Objects.equals(this.childrenData, catalogDataCategoryTreeInterface.childrenData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, parentId, name, isActive, position, level, productCount, childrenData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogDataCategoryTreeInterface {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    productCount: ").append(toIndentedString(productCount)).append("\n");
    sb.append("    childrenData: ").append(toIndentedString(childrenData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

