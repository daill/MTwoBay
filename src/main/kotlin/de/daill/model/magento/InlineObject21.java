/*
 * Commerce Admin REST endpoints - All inclusive
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.daill.model.magento;

import com.squareup.moshi.Json;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * InlineObject21
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-05T21:04:04.031930900+02:00[Europe/Berlin]")
public class InlineObject21 {
  public static final String SERIALIZED_NAME_ORIGIN_SOURCE_CODE = "originSourceCode";
  @Json(name = SERIALIZED_NAME_ORIGIN_SOURCE_CODE)
  private String originSourceCode;

  public static final String SERIALIZED_NAME_DESTINATION_SOURCE_CODE = "destinationSourceCode";
  @Json(name = SERIALIZED_NAME_DESTINATION_SOURCE_CODE)
  private String destinationSourceCode;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @Json(name = SERIALIZED_NAME_ITEMS)
  private List<InventoryCatalogApiDataPartialInventoryTransferItemInterface> items = new ArrayList<InventoryCatalogApiDataPartialInventoryTransferItemInterface>();


  public InlineObject21 originSourceCode(String originSourceCode) {
    
    this.originSourceCode = originSourceCode;
    return this;
  }

   /**
   * Get originSourceCode
   * @return originSourceCode
  **/


  public String getOriginSourceCode() {
    return originSourceCode;
  }


  public void setOriginSourceCode(String originSourceCode) {
    this.originSourceCode = originSourceCode;
  }


  public InlineObject21 destinationSourceCode(String destinationSourceCode) {
    
    this.destinationSourceCode = destinationSourceCode;
    return this;
  }

   /**
   * Get destinationSourceCode
   * @return destinationSourceCode
  **/


  public String getDestinationSourceCode() {
    return destinationSourceCode;
  }


  public void setDestinationSourceCode(String destinationSourceCode) {
    this.destinationSourceCode = destinationSourceCode;
  }


  public InlineObject21 items(List<InventoryCatalogApiDataPartialInventoryTransferItemInterface> items) {
    
    this.items = items;
    return this;
  }

  public InlineObject21 addItemsItem(InventoryCatalogApiDataPartialInventoryTransferItemInterface itemsItem) {
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/


  public List<InventoryCatalogApiDataPartialInventoryTransferItemInterface> getItems() {
    return items;
  }


  public void setItems(List<InventoryCatalogApiDataPartialInventoryTransferItemInterface> items) {
    this.items = items;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineObject21 inlineObject21 = (InlineObject21) o;
    return Objects.equals(this.originSourceCode, inlineObject21.originSourceCode) &&
        Objects.equals(this.destinationSourceCode, inlineObject21.destinationSourceCode) &&
        Objects.equals(this.items, inlineObject21.items);
  }

  @Override
  public int hashCode() {
    return Objects.hash(originSourceCode, destinationSourceCode, items);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineObject21 {\n");
    sb.append("    originSourceCode: ").append(toIndentedString(originSourceCode)).append("\n");
    sb.append("    destinationSourceCode: ").append(toIndentedString(destinationSourceCode)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

