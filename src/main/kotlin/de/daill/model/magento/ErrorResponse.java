/*
 * Commerce Admin REST endpoints - All inclusive
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.daill.model.magento;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;


import java.util.ArrayList;
import java.util.List;

/**
 * ErrorResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-05T21:04:04.031930900+02:00[Europe/Berlin]")
public class ErrorResponse {
  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<ErrorErrorsItem> errors = null;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private Integer code;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List<ErrorParametersItem> parameters = null;

  public static final String SERIALIZED_NAME_TRACE = "trace";
  @SerializedName(SERIALIZED_NAME_TRACE)
  private String trace;


  public ErrorResponse message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Error message
   * @return message
  **/
  

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public ErrorResponse errors(List<ErrorErrorsItem> errors) {
    
    this.errors = errors;
    return this;
  }

  public ErrorResponse addErrorsItem(ErrorErrorsItem errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<ErrorErrorsItem>();
    }
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * Errors list
   * @return errors
  **/
  
  

  public List<ErrorErrorsItem> getErrors() {
    return errors;
  }


  public void setErrors(List<ErrorErrorsItem> errors) {
    this.errors = errors;
  }


  public ErrorResponse code(Integer code) {
    
    this.code = code;
    return this;
  }

   /**
   * Error code
   * @return code
  **/
  
  

  public Integer getCode() {
    return code;
  }


  public void setCode(Integer code) {
    this.code = code;
  }


  public ErrorResponse parameters(List<ErrorParametersItem> parameters) {
    
    this.parameters = parameters;
    return this;
  }

  public ErrorResponse addParametersItem(ErrorParametersItem parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<ErrorParametersItem>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

   /**
   * Error parameters list
   * @return parameters
  **/
  
  

  public List<ErrorParametersItem> getParameters() {
    return parameters;
  }


  public void setParameters(List<ErrorParametersItem> parameters) {
    this.parameters = parameters;
  }


  public ErrorResponse trace(String trace) {
    
    this.trace = trace;
    return this;
  }

   /**
   * Stack trace
   * @return trace
  **/
  
  

  public String getTrace() {
    return trace;
  }


  public void setTrace(String trace) {
    this.trace = trace;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorResponse errorResponse = (ErrorResponse) o;
    return Objects.equals(this.message, errorResponse.message) &&
        Objects.equals(this.errors, errorResponse.errors) &&
        Objects.equals(this.code, errorResponse.code) &&
        Objects.equals(this.parameters, errorResponse.parameters) &&
        Objects.equals(this.trace, errorResponse.trace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, errors, code, parameters, trace);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorResponse {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    trace: ").append(toIndentedString(trace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

