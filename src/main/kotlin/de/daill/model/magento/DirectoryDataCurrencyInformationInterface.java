/*
 * Commerce Admin REST endpoints - All inclusive
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.daill.model.magento;

import com.squareup.moshi.Json;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Currency Information interface.
 */

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-05T21:04:04.031930900+02:00[Europe/Berlin]")
public class DirectoryDataCurrencyInformationInterface {
  public static final String SERIALIZED_NAME_BASE_CURRENCY_CODE = "base_currency_code";
  @Json(name = SERIALIZED_NAME_BASE_CURRENCY_CODE)
  private String baseCurrencyCode;

  public static final String SERIALIZED_NAME_BASE_CURRENCY_SYMBOL = "base_currency_symbol";
  @Json(name = SERIALIZED_NAME_BASE_CURRENCY_SYMBOL)
  private String baseCurrencySymbol;

  public static final String SERIALIZED_NAME_DEFAULT_DISPLAY_CURRENCY_CODE = "default_display_currency_code";
  @Json(name = SERIALIZED_NAME_DEFAULT_DISPLAY_CURRENCY_CODE)
  private String defaultDisplayCurrencyCode;

  public static final String SERIALIZED_NAME_DEFAULT_DISPLAY_CURRENCY_SYMBOL = "default_display_currency_symbol";
  @Json(name = SERIALIZED_NAME_DEFAULT_DISPLAY_CURRENCY_SYMBOL)
  private String defaultDisplayCurrencySymbol;

  public static final String SERIALIZED_NAME_AVAILABLE_CURRENCY_CODES = "available_currency_codes";
  @Json(name = SERIALIZED_NAME_AVAILABLE_CURRENCY_CODES)
  private List<String> availableCurrencyCodes = new ArrayList<String>();

  public static final String SERIALIZED_NAME_EXCHANGE_RATES = "exchange_rates";
  @Json(name = SERIALIZED_NAME_EXCHANGE_RATES)
  private List<DirectoryDataExchangeRateInterface> exchangeRates = new ArrayList<DirectoryDataExchangeRateInterface>();

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @Json(name = SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;


  public DirectoryDataCurrencyInformationInterface baseCurrencyCode(String baseCurrencyCode) {
    
    this.baseCurrencyCode = baseCurrencyCode;
    return this;
  }

   /**
   * The base currency code for the store.
   * @return baseCurrencyCode
  **/
  

  public String getBaseCurrencyCode() {
    return baseCurrencyCode;
  }


  public void setBaseCurrencyCode(String baseCurrencyCode) {
    this.baseCurrencyCode = baseCurrencyCode;
  }


  public DirectoryDataCurrencyInformationInterface baseCurrencySymbol(String baseCurrencySymbol) {
    
    this.baseCurrencySymbol = baseCurrencySymbol;
    return this;
  }

   /**
   * The currency symbol of the base currency for the store.
   * @return baseCurrencySymbol
  **/
  

  public String getBaseCurrencySymbol() {
    return baseCurrencySymbol;
  }


  public void setBaseCurrencySymbol(String baseCurrencySymbol) {
    this.baseCurrencySymbol = baseCurrencySymbol;
  }


  public DirectoryDataCurrencyInformationInterface defaultDisplayCurrencyCode(String defaultDisplayCurrencyCode) {
    
    this.defaultDisplayCurrencyCode = defaultDisplayCurrencyCode;
    return this;
  }

   /**
   * The default display currency code for the store.
   * @return defaultDisplayCurrencyCode
  **/
  

  public String getDefaultDisplayCurrencyCode() {
    return defaultDisplayCurrencyCode;
  }


  public void setDefaultDisplayCurrencyCode(String defaultDisplayCurrencyCode) {
    this.defaultDisplayCurrencyCode = defaultDisplayCurrencyCode;
  }


  public DirectoryDataCurrencyInformationInterface defaultDisplayCurrencySymbol(String defaultDisplayCurrencySymbol) {
    
    this.defaultDisplayCurrencySymbol = defaultDisplayCurrencySymbol;
    return this;
  }

   /**
   * The currency symbol of the default display currency for the store.
   * @return defaultDisplayCurrencySymbol
  **/
  

  public String getDefaultDisplayCurrencySymbol() {
    return defaultDisplayCurrencySymbol;
  }


  public void setDefaultDisplayCurrencySymbol(String defaultDisplayCurrencySymbol) {
    this.defaultDisplayCurrencySymbol = defaultDisplayCurrencySymbol;
  }


  public DirectoryDataCurrencyInformationInterface availableCurrencyCodes(List<String> availableCurrencyCodes) {
    
    this.availableCurrencyCodes = availableCurrencyCodes;
    return this;
  }

  public DirectoryDataCurrencyInformationInterface addAvailableCurrencyCodesItem(String availableCurrencyCodesItem) {
    this.availableCurrencyCodes.add(availableCurrencyCodesItem);
    return this;
  }

   /**
   * The list of allowed currency codes for the store.
   * @return availableCurrencyCodes
  **/
  

  public List<String> getAvailableCurrencyCodes() {
    return availableCurrencyCodes;
  }


  public void setAvailableCurrencyCodes(List<String> availableCurrencyCodes) {
    this.availableCurrencyCodes = availableCurrencyCodes;
  }


  public DirectoryDataCurrencyInformationInterface exchangeRates(List<DirectoryDataExchangeRateInterface> exchangeRates) {
    
    this.exchangeRates = exchangeRates;
    return this;
  }

  public DirectoryDataCurrencyInformationInterface addExchangeRatesItem(DirectoryDataExchangeRateInterface exchangeRatesItem) {
    this.exchangeRates.add(exchangeRatesItem);
    return this;
  }

   /**
   * The list of exchange rate information for the store.
   * @return exchangeRates
  **/
  

  public List<DirectoryDataExchangeRateInterface> getExchangeRates() {
    return exchangeRates;
  }


  public void setExchangeRates(List<DirectoryDataExchangeRateInterface> exchangeRates) {
    this.exchangeRates = exchangeRates;
  }


  public DirectoryDataCurrencyInformationInterface extensionAttributes(Object extensionAttributes) {
    
    this.extensionAttributes = extensionAttributes;
    return this;
  }

   /**
   * ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\CurrencyInformationInterface
   * @return extensionAttributes
  **/
  
  

  public Object getExtensionAttributes() {
    return extensionAttributes;
  }


  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectoryDataCurrencyInformationInterface directoryDataCurrencyInformationInterface = (DirectoryDataCurrencyInformationInterface) o;
    return Objects.equals(this.baseCurrencyCode, directoryDataCurrencyInformationInterface.baseCurrencyCode) &&
        Objects.equals(this.baseCurrencySymbol, directoryDataCurrencyInformationInterface.baseCurrencySymbol) &&
        Objects.equals(this.defaultDisplayCurrencyCode, directoryDataCurrencyInformationInterface.defaultDisplayCurrencyCode) &&
        Objects.equals(this.defaultDisplayCurrencySymbol, directoryDataCurrencyInformationInterface.defaultDisplayCurrencySymbol) &&
        Objects.equals(this.availableCurrencyCodes, directoryDataCurrencyInformationInterface.availableCurrencyCodes) &&
        Objects.equals(this.exchangeRates, directoryDataCurrencyInformationInterface.exchangeRates) &&
        Objects.equals(this.extensionAttributes, directoryDataCurrencyInformationInterface.extensionAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseCurrencyCode, baseCurrencySymbol, defaultDisplayCurrencyCode, defaultDisplayCurrencySymbol, availableCurrencyCodes, exchangeRates, extensionAttributes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectoryDataCurrencyInformationInterface {\n");
    sb.append("    baseCurrencyCode: ").append(toIndentedString(baseCurrencyCode)).append("\n");
    sb.append("    baseCurrencySymbol: ").append(toIndentedString(baseCurrencySymbol)).append("\n");
    sb.append("    defaultDisplayCurrencyCode: ").append(toIndentedString(defaultDisplayCurrencyCode)).append("\n");
    sb.append("    defaultDisplayCurrencySymbol: ").append(toIndentedString(defaultDisplayCurrencySymbol)).append("\n");
    sb.append("    availableCurrencyCodes: ").append(toIndentedString(availableCurrencyCodes)).append("\n");
    sb.append("    exchangeRates: ").append(toIndentedString(exchangeRates)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

