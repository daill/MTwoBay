/*
 * Commerce Admin REST endpoints - All inclusive
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.daill.model.magento;

import com.squareup.moshi.Json;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Represents Data Object which holds enough information to render product This information is put into part as Add To Cart or Add to Compare Data or Price Data
 */

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-05T21:04:04.031930900+02:00[Europe/Berlin]")
public class CatalogDataProductRenderInterface {
  public static final String SERIALIZED_NAME_ADD_TO_CART_BUTTON = "add_to_cart_button";
  @Json(name = SERIALIZED_NAME_ADD_TO_CART_BUTTON)
  private CatalogDataProductRenderButtonInterface addToCartButton;

  public static final String SERIALIZED_NAME_ADD_TO_COMPARE_BUTTON = "add_to_compare_button";
  @Json(name = SERIALIZED_NAME_ADD_TO_COMPARE_BUTTON)
  private CatalogDataProductRenderButtonInterface addToCompareButton;

  public static final String SERIALIZED_NAME_PRICE_INFO = "price_info";
  @Json(name = SERIALIZED_NAME_PRICE_INFO)
  private CatalogDataProductRenderPriceInfoInterface priceInfo;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @Json(name = SERIALIZED_NAME_IMAGES)
  private List<CatalogDataProductRenderImageInterface> images = new ArrayList<CatalogDataProductRenderImageInterface>();

  public static final String SERIALIZED_NAME_URL = "url";
  @Json(name = SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_ID = "id";
  @Json(name = SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @Json(name = SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @Json(name = SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_IS_SALABLE = "is_salable";
  @Json(name = SERIALIZED_NAME_IS_SALABLE)
  private String isSalable;

  public static final String SERIALIZED_NAME_STORE_ID = "store_id";
  @Json(name = SERIALIZED_NAME_STORE_ID)
  private Integer storeId;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @Json(name = SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @Json(name = SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private CatalogDataProductRenderExtensionInterface extensionAttributes;


  public CatalogDataProductRenderInterface addToCartButton(CatalogDataProductRenderButtonInterface addToCartButton) {
    
    this.addToCartButton = addToCartButton;
    return this;
  }

   /**
   * Get addToCartButton
   * @return addToCartButton
  **/
  

  public CatalogDataProductRenderButtonInterface getAddToCartButton() {
    return addToCartButton;
  }


  public void setAddToCartButton(CatalogDataProductRenderButtonInterface addToCartButton) {
    this.addToCartButton = addToCartButton;
  }


  public CatalogDataProductRenderInterface addToCompareButton(CatalogDataProductRenderButtonInterface addToCompareButton) {
    
    this.addToCompareButton = addToCompareButton;
    return this;
  }

   /**
   * Get addToCompareButton
   * @return addToCompareButton
  **/
  

  public CatalogDataProductRenderButtonInterface getAddToCompareButton() {
    return addToCompareButton;
  }


  public void setAddToCompareButton(CatalogDataProductRenderButtonInterface addToCompareButton) {
    this.addToCompareButton = addToCompareButton;
  }


  public CatalogDataProductRenderInterface priceInfo(CatalogDataProductRenderPriceInfoInterface priceInfo) {
    
    this.priceInfo = priceInfo;
    return this;
  }

   /**
   * Get priceInfo
   * @return priceInfo
  **/
  

  public CatalogDataProductRenderPriceInfoInterface getPriceInfo() {
    return priceInfo;
  }


  public void setPriceInfo(CatalogDataProductRenderPriceInfoInterface priceInfo) {
    this.priceInfo = priceInfo;
  }


  public CatalogDataProductRenderInterface images(List<CatalogDataProductRenderImageInterface> images) {
    
    this.images = images;
    return this;
  }

  public CatalogDataProductRenderInterface addImagesItem(CatalogDataProductRenderImageInterface imagesItem) {
    this.images.add(imagesItem);
    return this;
  }

   /**
   * Enough information, that needed to render image on front
   * @return images
  **/
  

  public List<CatalogDataProductRenderImageInterface> getImages() {
    return images;
  }


  public void setImages(List<CatalogDataProductRenderImageInterface> images) {
    this.images = images;
  }


  public CatalogDataProductRenderInterface url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Product url
   * @return url
  **/
  

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public CatalogDataProductRenderInterface id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Product identifier
   * @return id
  **/
  

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public CatalogDataProductRenderInterface name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Product name
   * @return name
  **/
  

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CatalogDataProductRenderInterface type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Product type. Such as bundle, grouped, simple, etc...
   * @return type
  **/
  

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public CatalogDataProductRenderInterface isSalable(String isSalable) {
    
    this.isSalable = isSalable;
    return this;
  }

   /**
   * Information about product saleability (In Stock)
   * @return isSalable
  **/
  

  public String getIsSalable() {
    return isSalable;
  }


  public void setIsSalable(String isSalable) {
    this.isSalable = isSalable;
  }


  public CatalogDataProductRenderInterface storeId(Integer storeId) {
    
    this.storeId = storeId;
    return this;
  }

   /**
   * Information about current store id or requested store id
   * @return storeId
  **/
  

  public Integer getStoreId() {
    return storeId;
  }


  public void setStoreId(Integer storeId) {
    this.storeId = storeId;
  }


  public CatalogDataProductRenderInterface currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Current or desired currency code to product
   * @return currencyCode
  **/
  

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public CatalogDataProductRenderInterface extensionAttributes(CatalogDataProductRenderExtensionInterface extensionAttributes) {
    
    this.extensionAttributes = extensionAttributes;
    return this;
  }

   /**
   * Get extensionAttributes
   * @return extensionAttributes
  **/
  

  public CatalogDataProductRenderExtensionInterface getExtensionAttributes() {
    return extensionAttributes;
  }


  public void setExtensionAttributes(CatalogDataProductRenderExtensionInterface extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogDataProductRenderInterface catalogDataProductRenderInterface = (CatalogDataProductRenderInterface) o;
    return Objects.equals(this.addToCartButton, catalogDataProductRenderInterface.addToCartButton) &&
        Objects.equals(this.addToCompareButton, catalogDataProductRenderInterface.addToCompareButton) &&
        Objects.equals(this.priceInfo, catalogDataProductRenderInterface.priceInfo) &&
        Objects.equals(this.images, catalogDataProductRenderInterface.images) &&
        Objects.equals(this.url, catalogDataProductRenderInterface.url) &&
        Objects.equals(this.id, catalogDataProductRenderInterface.id) &&
        Objects.equals(this.name, catalogDataProductRenderInterface.name) &&
        Objects.equals(this.type, catalogDataProductRenderInterface.type) &&
        Objects.equals(this.isSalable, catalogDataProductRenderInterface.isSalable) &&
        Objects.equals(this.storeId, catalogDataProductRenderInterface.storeId) &&
        Objects.equals(this.currencyCode, catalogDataProductRenderInterface.currencyCode) &&
        Objects.equals(this.extensionAttributes, catalogDataProductRenderInterface.extensionAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addToCartButton, addToCompareButton, priceInfo, images, url, id, name, type, isSalable, storeId, currencyCode, extensionAttributes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogDataProductRenderInterface {\n");
    sb.append("    addToCartButton: ").append(toIndentedString(addToCartButton)).append("\n");
    sb.append("    addToCompareButton: ").append(toIndentedString(addToCompareButton)).append("\n");
    sb.append("    priceInfo: ").append(toIndentedString(priceInfo)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    isSalable: ").append(toIndentedString(isSalable)).append("\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

