/*
 * Commerce Admin REST endpoints - All inclusive
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.4.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.daill.model.magento;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;


/**
 * Interface AgreementInterface
 */

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-05T21:04:04.031930900+02:00[Europe/Berlin]")
public class CheckoutAgreementsDataAgreementInterface {
  public static final String SERIALIZED_NAME_AGREEMENT_ID = "agreement_id";
  @SerializedName(SERIALIZED_NAME_AGREEMENT_ID)
  private Integer agreementId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_CONTENT_HEIGHT = "content_height";
  @SerializedName(SERIALIZED_NAME_CONTENT_HEIGHT)
  private String contentHeight;

  public static final String SERIALIZED_NAME_CHECKBOX_TEXT = "checkbox_text";
  @SerializedName(SERIALIZED_NAME_CHECKBOX_TEXT)
  private String checkboxText;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_IS_HTML = "is_html";
  @SerializedName(SERIALIZED_NAME_IS_HTML)
  private Boolean isHtml;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private Integer mode;

  public static final String SERIALIZED_NAME_EXTENSION_ATTRIBUTES = "extension_attributes";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ATTRIBUTES)
  private Object extensionAttributes;


  public CheckoutAgreementsDataAgreementInterface agreementId(Integer agreementId) {
    
    this.agreementId = agreementId;
    return this;
  }

   /**
   * Agreement ID.
   * @return agreementId
  **/


  public Integer getAgreementId() {
    return agreementId;
  }


  public void setAgreementId(Integer agreementId) {
    this.agreementId = agreementId;
  }


  public CheckoutAgreementsDataAgreementInterface name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Agreement name.
   * @return name
  **/


  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CheckoutAgreementsDataAgreementInterface content(String content) {
    
    this.content = content;
    return this;
  }

   /**
   * Agreement content.
   * @return content
  **/


  public String getContent() {
    return content;
  }


  public void setContent(String content) {
    this.content = content;
  }


  public CheckoutAgreementsDataAgreementInterface contentHeight(String contentHeight) {
    
    this.contentHeight = contentHeight;
    return this;
  }

   /**
   * Agreement content height. Otherwise, null.
   * @return contentHeight
  **/



  public String getContentHeight() {
    return contentHeight;
  }


  public void setContentHeight(String contentHeight) {
    this.contentHeight = contentHeight;
  }


  public CheckoutAgreementsDataAgreementInterface checkboxText(String checkboxText) {
    
    this.checkboxText = checkboxText;
    return this;
  }

   /**
   * Agreement checkbox text.
   * @return checkboxText
  **/


  public String getCheckboxText() {
    return checkboxText;
  }


  public void setCheckboxText(String checkboxText) {
    this.checkboxText = checkboxText;
  }


  public CheckoutAgreementsDataAgreementInterface isActive(Boolean isActive) {
    
    this.isActive = isActive;
    return this;
  }

   /**
   * Agreement status.
   * @return isActive
  **/


  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public CheckoutAgreementsDataAgreementInterface isHtml(Boolean isHtml) {
    
    this.isHtml = isHtml;
    return this;
  }

   /**
   * * true - HTML. * false - plain text.
   * @return isHtml
  **/


  public Boolean getIsHtml() {
    return isHtml;
  }


  public void setIsHtml(Boolean isHtml) {
    this.isHtml = isHtml;
  }


  public CheckoutAgreementsDataAgreementInterface mode(Integer mode) {
    
    this.mode = mode;
    return this;
  }

   /**
   * The agreement applied mode.
   * @return mode
  **/


  public Integer getMode() {
    return mode;
  }


  public void setMode(Integer mode) {
    this.mode = mode;
  }


  public CheckoutAgreementsDataAgreementInterface extensionAttributes(Object extensionAttributes) {
    
    this.extensionAttributes = extensionAttributes;
    return this;
  }

   /**
   * ExtensionInterface class for @see \\Magento\\CheckoutAgreements\\Api\\Data\\AgreementInterface
   * @return extensionAttributes
  **/



  public Object getExtensionAttributes() {
    return extensionAttributes;
  }


  public void setExtensionAttributes(Object extensionAttributes) {
    this.extensionAttributes = extensionAttributes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutAgreementsDataAgreementInterface checkoutAgreementsDataAgreementInterface = (CheckoutAgreementsDataAgreementInterface) o;
    return Objects.equals(this.agreementId, checkoutAgreementsDataAgreementInterface.agreementId) &&
        Objects.equals(this.name, checkoutAgreementsDataAgreementInterface.name) &&
        Objects.equals(this.content, checkoutAgreementsDataAgreementInterface.content) &&
        Objects.equals(this.contentHeight, checkoutAgreementsDataAgreementInterface.contentHeight) &&
        Objects.equals(this.checkboxText, checkoutAgreementsDataAgreementInterface.checkboxText) &&
        Objects.equals(this.isActive, checkoutAgreementsDataAgreementInterface.isActive) &&
        Objects.equals(this.isHtml, checkoutAgreementsDataAgreementInterface.isHtml) &&
        Objects.equals(this.mode, checkoutAgreementsDataAgreementInterface.mode) &&
        Objects.equals(this.extensionAttributes, checkoutAgreementsDataAgreementInterface.extensionAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agreementId, name, content, contentHeight, checkboxText, isActive, isHtml, mode, extensionAttributes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutAgreementsDataAgreementInterface {\n");
    sb.append("    agreementId: ").append(toIndentedString(agreementId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    contentHeight: ").append(toIndentedString(contentHeight)).append("\n");
    sb.append("    checkboxText: ").append(toIndentedString(checkboxText)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isHtml: ").append(toIndentedString(isHtml)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    extensionAttributes: ").append(toIndentedString(extensionAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

