/*
 * Inventory API
 * The Inventory API is used to create and manage inventory, and then to publish and manage this inventory on an eBay marketplace. There are also methods in this API that will convert eligible, active eBay listings into the Inventory API model.
 *
 * The version of the OpenAPI document: 1.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.annotations.SerializedName;



import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * This type is used by the &lt;strong&gt;createOrReplaceProductCompatibility&lt;/strong&gt; call to associate compatible vehicles to an inventory item. This type is also the base response of the &lt;strong&gt;getProductCompatibility&lt;/strong&gt; call.
 */

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-02T16:14:13.966768200+02:00[Europe/Berlin]")
public class Compatibility {
  public static final String SERIALIZED_NAME_COMPATIBLE_PRODUCTS = "compatibleProducts";
  @SerializedName(SERIALIZED_NAME_COMPATIBLE_PRODUCTS)
  private List<CompatibleProduct> compatibleProducts = null;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;


  public Compatibility compatibleProducts(List<CompatibleProduct> compatibleProducts) {
    
    this.compatibleProducts = compatibleProducts;
    return this;
  }

  public Compatibility addCompatibleProductsItem(CompatibleProduct compatibleProductsItem) {
    if (this.compatibleProducts == null) {
      this.compatibleProducts = new ArrayList<CompatibleProduct>();
    }
    this.compatibleProducts.add(compatibleProductsItem);
    return this;
  }

   /**
   * This container consists of an array of motor vehicles (make, model, year, trim, engine) that are compatible with the motor vehicle part or accessory specified by the sku value.
   * @return compatibleProducts
  **/
  


  public List<CompatibleProduct> getCompatibleProducts() {
    return compatibleProducts;
  }


  public void setCompatibleProducts(List<CompatibleProduct> compatibleProducts) {
    this.compatibleProducts = compatibleProducts;
  }


  public Compatibility sku(String sku) {
    
    this.sku = sku;
    return this;
  }

   /**
   * This is the seller-defined SKU value of the inventory item that will be associated with the compatible vehicles. This field is not applicable to the &lt;strong&gt;createOrReplaceProductCompatibility&lt;/strong&gt;  call, but it is always returned with the &lt;strong&gt;getProductCompatibility&lt;/strong&gt; call. For the &lt;strong&gt;createOrReplaceProductCompatibility&lt;/strong&gt;  call, the SKU value for the inventory item is actually passed in as part of the call URI, and not in the request payload.
   * @return sku
  **/
  


  public String getSku() {
    return sku;
  }


  public void setSku(String sku) {
    this.sku = sku;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Compatibility compatibility = (Compatibility) o;
    return Objects.equals(this.compatibleProducts, compatibility.compatibleProducts) &&
        Objects.equals(this.sku, compatibility.sku);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compatibleProducts, sku);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Compatibility {\n");
    sb.append("    compatibleProducts: ").append(toIndentedString(compatibleProducts)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

