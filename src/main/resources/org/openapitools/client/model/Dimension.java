/*
 * Inventory API
 * The Inventory API is used to create and manage inventory, and then to publish and manage this inventory on an eBay marketplace. There are also methods in this API that will convert eligible, active eBay listings into the Inventory API model.
 *
 * The version of the OpenAPI document: 1.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.annotations.SerializedName;



import java.math.BigDecimal;
import java.util.Objects;

/**
 * This type is used to specify the dimensions (and the unit used to measure those dimensions) of a shipping package. The &lt;strong&gt;dimensions&lt;/strong&gt; container is conditionally required if the seller will be offering calculated shipping rates to determine shipping cost. See the &lt;a href&#x3D;\&quot;https://pages.ebay.com/help/pay/calculated-shipping.html\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Calculated shipping&lt;/a&gt; help page for more information on calculated shipping.
 */

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-02T16:14:13.966768200+02:00[Europe/Berlin]")
public class Dimension {
  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private BigDecimal height;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private BigDecimal length;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private BigDecimal width;


  public Dimension height(BigDecimal height) {
    
    this.height = height;
    return this;
  }

   /**
   * The actual height (in the measurement unit specified in the &lt;strong&gt;unit&lt;/strong&gt; field) of the shipping package. All fields of the &lt;strong&gt;dimensions&lt;/strong&gt; container are required if package dimensions are specified. &lt;br/&gt;&lt;br/&gt; If a shipping package measured 21.5 inches in length, 15.0 inches in width, and 12.0 inches in height, the &lt;strong&gt;dimensions&lt;/strong&gt; container would look as follows: &lt;br/&gt; &lt;pre&gt;&lt;code&gt;\&quot;dimensions\&quot;: {&lt;br/&gt; \&quot;length\&quot;: 21.5,&lt;br/&gt; \&quot;width\&quot;: 15.0,&lt;br/&gt; \&quot;height\&quot;: 12.0,&lt;br/&gt; \&quot;unit\&quot;: \&quot;INCH\&quot;&lt;br/&gt; } &lt;/pre&gt;&lt;/code&gt;
   * @return height
  **/
  @javax.annotation.Nullable


  public BigDecimal getHeight() {
    return height;
  }


  public void setHeight(BigDecimal height) {
    this.height = height;
  }


  public Dimension length(BigDecimal length) {
    
    this.length = length;
    return this;
  }

   /**
   * The actual length (in the measurement unit specified in the &lt;strong&gt;unit&lt;/strong&gt; field) of the shipping package. All fields of the &lt;strong&gt;dimensions&lt;/strong&gt; container are required if package dimensions are specified. &lt;br/&gt;&lt;br/&gt; If a shipping package measured 21.5 inches in length, 15.0 inches in width, and 12.0 inches in height,  the &lt;strong&gt;dimensions&lt;/strong&gt; container would look as follows: &lt;br/&gt; &lt;pre&gt;&lt;code&gt;\&quot;dimensions\&quot;: {&lt;br/&gt; \&quot;length\&quot;: 21.5,&lt;br/&gt; \&quot;width\&quot;: 15.0,&lt;br/&gt; \&quot;height\&quot;: 12.0,&lt;br/&gt; \&quot;unit\&quot;: \&quot;INCH\&quot;&lt;br/&gt; } &lt;/pre&gt;&lt;/code&gt;
   * @return length
  **/
  @javax.annotation.Nullable


  public BigDecimal getLength() {
    return length;
  }


  public void setLength(BigDecimal length) {
    this.length = length;
  }


  public Dimension unit(String unit) {
    
    this.unit = unit;
    return this;
  }

   /**
   * The unit of measurement used to specify the dimensions of a shipping package. All fields of the &lt;strong&gt;dimensions&lt;/strong&gt; container are required if package dimensions are specified. If the English system of measurement is being used, the applicable values for dimension units are &lt;code&gt;FEET&lt;/code&gt; and &lt;code&gt;INCH&lt;/code&gt;. If the metric system of measurement is being used, the applicable values for weight units are &lt;code&gt;METER&lt;/code&gt; and &lt;code&gt;CENTIMETER&lt;/code&gt;. The metric system is used by most countries outside of the US. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/inventory/types/slr:LengthUnitOfMeasureEnum&#39;&gt;eBay API documentation&lt;/a&gt;
   * @return unit
  **/
  @javax.annotation.Nullable


  public String getUnit() {
    return unit;
  }


  public void setUnit(String unit) {
    this.unit = unit;
  }


  public Dimension width(BigDecimal width) {
    
    this.width = width;
    return this;
  }

   /**
   * The actual width (in the measurement unit specified in the &lt;strong&gt;unit&lt;/strong&gt; field) of the shipping package. All fields of the &lt;strong&gt;dimensions&lt;/strong&gt; container are required if package dimensions are specified.&lt;br/&gt;&lt;br/&gt; If a shipping package measured 21.5 inches in length, 15.0 inches in width, and 12.0 inches in height,  the &lt;strong&gt;dimensions&lt;/strong&gt; container would look as follows: &lt;br/&gt; &lt;pre&gt;&lt;code&gt;\&quot;dimensions\&quot;: {&lt;br/&gt; \&quot;length\&quot;: 21.5,&lt;br/&gt; \&quot;width\&quot;: 15.0,&lt;br/&gt; \&quot;height\&quot;: 12.0,&lt;br/&gt; \&quot;unit\&quot;: \&quot;INCH\&quot;&lt;br/&gt; } &lt;/pre&gt;&lt;/code&gt;
   * @return width
  **/
  @javax.annotation.Nullable


  public BigDecimal getWidth() {
    return width;
  }


  public void setWidth(BigDecimal width) {
    this.width = width;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dimension dimension = (Dimension) o;
    return Objects.equals(this.height, dimension.height) &&
        Objects.equals(this.length, dimension.length) &&
        Objects.equals(this.unit, dimension.unit) &&
        Objects.equals(this.width, dimension.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(height, length, unit, width);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dimension {\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

