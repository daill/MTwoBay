/*
 * Inventory API
 * The Inventory API is used to create and manage inventory, and then to publish and manage this inventory on an eBay marketplace. There are also methods in this API that will convert eligible, active eBay listings into the Inventory API model.
 *
 * The version of the OpenAPI document: 1.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;


import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * This type is used to specify product aspects for which variations within an inventory item group vary, and the order in which they appear in the listing. For example, t-shirts in an inventory item group may be available in multiple sizes and colors.
 */

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-02T16:14:13.966768200+02:00[Europe/Berlin]")
public class Specification {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<String> values = null;


  public Specification name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * This is the name of product variation aspect. Typically, for clothing, typical aspect names are &lt;code&gt;\&quot;Size\&quot;&lt;/code&gt; and &lt;code&gt;\&quot;Color\&quot;&lt;/code&gt;. Product variation aspects are not required immediately upon creating an inventory item group, but these aspects will be required before a multiple-variation listing containing this inventory item group is published. For each product variation aspect that is specified through the &lt;strong&gt;specifications&lt;/strong&gt; container, one &lt;strong&gt;name&lt;/strong&gt; value is required and two or more variations of this aspect are required through the &lt;strong&gt;values&lt;/strong&gt; array.&lt;br/&gt;&lt;br/&gt; &lt;span class&#x3D;\&quot;tablenote\&quot;&gt; &lt;strong&gt;Note:&lt;/strong&gt; Each member of the inventory item group should have these same aspect names specified through the &lt;strong&gt;product.aspects&lt;/strong&gt; container when the inventory item is created with the &lt;strong&gt;createOrReplaceInventoryItem&lt;/strong&gt; or &lt;strong&gt;bulkCreateOrReplaceInventoryItem&lt;/strong&gt; call. &lt;/span&gt;&lt;br/&gt;&lt;strong&gt;Max Length&lt;/strong&gt;: 40
   * @return name
  **/
  


  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Specification values(List<String> values) {
    
    this.values = values;
    return this;
  }

  public Specification addValuesItem(String valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<String>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * This is an array of values pertaining to the corresponding product variation aspect (specified in the &lt;strong&gt;name&lt;/strong&gt; field). Below is a sample of how these values will appear under a &lt;strong&gt;specifications&lt;/strong&gt; container: &lt;br/&gt; &lt;pre&gt;&lt;code&gt;\&quot;specifications\&quot;: [{&lt;br/&gt; \&quot;name\&quot;: \&quot;Size\&quot;,&lt;br/&gt; \&quot;values\&quot;: [\&quot;Small\&quot;,&lt;br/&gt; \&quot;Medium\&quot;,&lt;br/&gt; \&quot;Large\&quot;]&lt;br/&gt; },&lt;br/&gt; { &lt;br/&gt; \&quot;name\&quot;: \&quot;Color\&quot;,&lt;br/&gt; \&quot;values\&quot;: [\&quot;Blue\&quot;,&lt;br/&gt; \&quot;White\&quot;,&lt;br/&gt; \&quot;Red\&quot;] &lt;br/&gt; }] &lt;/pre&gt;&lt;/code&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt; &lt;strong&gt;Note:&lt;/strong&gt; Each member of the inventory item group should have these same aspect names, and each individual inventory item should have each variation of the product aspect values specified through the &lt;strong&gt;product.aspects&lt;/strong&gt; container when the inventory item is created with the &lt;strong&gt;createOrReplaceInventoryItem&lt;/strong&gt; or &lt;strong&gt;bulkCreateOrReplaceInventoryItem&lt;/strong&gt; call. &lt;/span&gt;&lt;br/&gt;&lt;strong&gt;Max Length&lt;/strong&gt;: 50
   * @return values
  **/
  


  public List<String> getValues() {
    return values;
  }


  public void setValues(List<String> values) {
    this.values = values;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Specification specification = (Specification) o;
    return Objects.equals(this.name, specification.name) &&
        Objects.equals(this.values, specification.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, values);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Specification {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

